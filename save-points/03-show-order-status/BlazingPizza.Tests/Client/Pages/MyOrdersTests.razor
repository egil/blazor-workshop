@inherits TestContext
@code
{    
    public MyOrdersTests()
    {
        this.AddBlazingPizzaSupport();        
    }

    [Fact]
    public void When_PizzaAPI_Hasnt_Returned_OrdersWithStatus_A_Loading_Message_Is_Displayed()
    {
        Services.AddSingleton<IPizzaApi, LoadingForeverPizzaApi>();
        
        var cut = Render(@<MyOrders/>);
        
        cut.MarkupMatches(@<div class="main">Loading...</div>);
    }

    [Fact]
    public void When_PizzaAPI_Returns_Empty_OrdersWithStatus_A_NoOrders_Message_Is_Displayed()
    {       
        var cut = Render(@<MyOrders/>);
        
        cut.MarkupMatches(
            @<div class="main">
                <h2>No orders placed</h2>    
                <a class="btn btn-success" href="">Order some pizza</a>
            </div>);
    }

    [Theory, AutoData]
    public async Task When_PizzaAPI_Returns_OrdersWithStatus_The_OrdersTable_Component_Is_Rendered_With_The_Orders(
        Order order)
    {        
        var api = Services.GetRequiredService<FakePizzaApi>();
        await api.PlaceOrderAsync(order);
        var ordersWithStatus = await api.GetOrdersWithStatusAsync();
        
        var cut = Render(@<MyOrders/>);

        cut.FindComponent<OrdersTable>()
            .Instance
            .Orders
            .Should()
            .BeEquivalentTo(ordersWithStatus);
    }
}