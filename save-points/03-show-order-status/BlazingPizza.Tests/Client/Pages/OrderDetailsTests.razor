@inherits TestContext
@code
{
    private FakePizzaApi Api { get; }

    public OrderDetailsTests()
    {
        Api = new FakePizzaApi();
        Services.AddSingleton<IPizzaApi>(Api);
    }

    [Fact]
    public void When_API_Hasnt_Returned_A_OrderWithDetail_The_Loading_Message_Is_Displayed()
    {
        Services.AddSingleton<IPizzaApi, LoadingForeverPizzaApi>();

        var cut = Render(@<OrderDetails OrderId="1234" />);

        cut.MarkupMatches(@<div class="main">Loading...</div>);
    }

    [Fact]
    public void When_API_Returns_An_InvalidOrder_An_Invalid_Order_Message_Is_Displayed()
    {
        var cut = Render(@<OrderDetails OrderId="1234" />);

        cut.MarkupMatches(
            @<div class="main">
                <h2>Nope</h2>
                <p>Sorry, this order could not be loaded.</p>    
             </div>);
    }

    [Theory, AutoData]
    public async Task When_API_Returns_An_Order_A_OrderTracker_Is_Displayed(Order order)
    {
        var orderId = await Api.PlaceOrderAsync(order);
        var orderWithStatus = await Api.GetOrderWithStatusById(orderId);

        var cut = Render(@<OrderDetails OrderId=orderId />);

        cut.MarkupMatches(
            @<div class="main">
                <div class="track-order">
                    <div class="track-order-title">
                        <h2>
                            Order placed @orderWithStatus.Order.CreatedTime.ToLongDateString()
                        </h2>
                        <p class="ml-auto mb-0">
                            Status: <strong>@orderWithStatus.StatusText</strong>
                        </p>
                    </div>
                    <div class="track-order-body">
                        TODO: show more details
                    </div>
                </div> 
             </div>);
    }

    [Theory, AutoData]
    public async Task When_API_Returns_Updates_To_Order_The_OrderTracker_Is_Updated(Order newOrder)
    {
        var orderId = await Api.PlaceOrderAsync(newOrder);
        var cut = Render(@<OrderDetails OrderId=orderId />);
        var statusElement = cut.Find(".track-order p");

        // act
        Api.SetOrderStatusAsDelivered(orderId);

        // assert
        //var orderStatus = await GetOrderWithStatusById(orderId);
        cut.WaitForAssertion(() => statusElement.TextContent.MarkupMatches($"Status: Delivered"));
    }

}
